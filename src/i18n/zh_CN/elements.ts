export default {
  Process: '流程',

  StartEvent: '开始事件',
  MessageStartEvent: '消息开始事件',
  SignalStartEvent: '信号开始事件',
  ErrorStartEvent: '错误开始事件',
  TimerStartEvent: '定时开始事件',
  ConditionalStartEvent: '条件开始事件',

  EndEvent: '结束事件',
  ErrorEndEvent: '错误结束事件',
  MessageEndEvent: '消息结束事件',
  EscalationEndEvent: '升级结束事件',
  CancelEndEvent: '取消结束事件',
  CompensateEndEvent: '补偿结束事件',
  SignalEndEvent: '信号结束事件',
  TerminateEndEvent: '终止结束事件',

  Task: '任务',
  UserTask: '用户任务',
  ScriptTask: '脚本任务',
  ServiceTask: '服务任务',
  SendTask: '发送任务',
  ReceiveTask: '接收任务',
  ManualTask: '手工任务',
  BusinessRuleTask: '业务规则任务',

  Gateway: '网关',
  ExclusiveGateway: '互斥网关',
  ParallelGateway: '并行网关',
  InclusiveGateway: '包容网关',
  ComplexGateway: '复杂网关',
  EventBasedGateway: '事件网关',

  SubProcess: '子流程',
  CallActivity: '调用活动',
  CollapsedSubProcess: '可折叠子流程',
  ExpandedSubProcess: '展开子流程',
  EventSubProcess: '事件子流程',
  Transaction: '事务子流程',

  IntermediateCatchEvent: '中间捕获事件',
  MessageIntermediateCatchEvent: '中间消息捕获事件',
  TimerIntermediateCatchEvent: '中间定时捕获事件',
  ConditionalIntermediateCatchEvent: '中间条件捕获事件',
  LinkIntermediateCatchEvent: '中间链接捕获事件',
  SignalIntermediateCatchEvent: '中间信号捕获事件',

  IntermediateThrowEvent: '中间抛出事件',
  MessageIntermediateThrowEvent: '中间消息抛出事件',
  EscalationIntermediateThrowEvent: '中间升级抛出事件',
  LinkIntermediateThrowEvent: '中间链接抛出事件',
  CompensateIntermediateThrowEvent: '中间补偿抛出事件',
  SignalIntermediateThrowEvent: '中间信号抛出事件',

  BoundaryEvent: '边界事件',
  MessageBoundaryEvent: '消息边界事件',
  TimerBoundaryEvent: '定时边界事件',
  SignalBoundaryEvent: '信号边界事件',
  ErrorBoundaryEvent: '错误边界事件',
  EscalationBoundaryEvent: '升级边界事件',
  ConditionalBoundaryEvent: '条件边界事件',
  CompensateBoundaryEvent: '补偿边界事件',
  MessageBoundaryEventNonInterrupting: '消息边界事件(非中断)',
  TimerBoundaryEventNonInterrupting: '定时边界事件(非中断)',
  EscalationBoundaryEventNonInterrupting: '升级边界事件(非中断)',
  ConditionalBoundaryEventNonInterrupting: '条件边界事件(非中断)',
  SignalBoundaryEventNonInterrupting: '信号边界事件(非中断)',

  Group: '组',
  DataStoreReference: '数据存储引用',
  DataObjectReference: '数据对象引用',
  Participant: '泳池',
  Lane: '泳道',
  Collaboration: '协同',
  SequenceFlow: '顺序流',
  DefaultFlow: '默认流',
  ConditionalFlow: '条件流'
}
